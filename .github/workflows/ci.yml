name: CI

on:
  push:
    branches:
      - master
      - develop
      - release
      - release/*
      - feature/*
      - feat/*
      - fix/*
      - test/*
      - chore/*
      - build/*
      - docs/*

    tags:
      - '*'

env:
  NPM_TOKEN: ${{secrets.GA_TOKEN}}

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Extract tag
        id: extract-tag
        run: echo "::set-output name=tag::${GITHUB_REF/refs\/tags\//}"

      - name: Check tag
        run: echo ${{ steps.extract-tag.outputs.tag }}

      - name: Extract branch
        id: extract-branch
        run: echo "::set-output name=branch::${GITHUB_REF/refs\/heads\//}"

      - name: Check branch
        run: echo ${{ steps.extract-branch.outputs.branch }}

      - uses: actions/setup-node@v1
        with:
          node-version: 14

      - run: npm run bootstrap

      - run: npm run lint:all

      - run: npm run build:all

      - run: npm run test:ci

  release:
    name: Create release
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

  publish-npm:
    name: Publish NPM package
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 14
          registry-url: https://npm.pkg.github.com/

      - run: npm run bootstrap

      - run: npm run build:all

      - run: npm publish packages/semcom-core
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - run: npm publish packages/semcom-node
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - run: npm publish packages/semcom-sdk
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

  publish-docker:
    name: Publish Docker image
    needs: publish-npm
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v2

      - name: Extract tag
        id: extract-tag
        run: echo "::set-output name=tag::${GITHUB_REF/refs\/tags\//}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GA_TOKEN }}

      - name: Build and push semcom node
        id: docker_build_semcom_node
        uses: docker/build-push-action@v2
        with:
          context: packages/semcom-node/
          push: true
          tags: |
            ghcr.io/digita-ai/semcom-node:latest
            ghcr.io/digita-ai/semcom-node:${{ steps.extract-tag.outputs.tag }}
          build-args: |
            NPM_TOKEN=${{secrets.GA_TOKEN}}

      - uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Store DigitalOcean credentials
        run: doctl kubernetes cluster kubeconfig save dgt-k8s

      # See https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment
      - name: Update deployment
        run: |
          kubectl set image deployment/semcom-deployment semcom-node=ghcr.io/digita-ai/semcom-node:${{ steps.extract-tag.outputs.tag }} --record
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/semcom-deployment

  publish-docs:
    name: Publish docs
    needs: publish-docs
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v2

      - uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Store DigitalOcean credentials
        run: doctl kubernetes cluster kubeconfig save dgt-k8s

      # See https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment
      - name: Update deployment
        run: |
          kubectl set image deployment/dgt-docs-deployment dgt-docs-public=ghcr.io/digita-ai/dgt-docs-public:latest --record

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/dgt-docs-deployment